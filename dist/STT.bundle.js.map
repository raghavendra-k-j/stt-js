{
  "version": 3,
  "sources": ["../src/STTError.ts", "../src/STT.ts"],
  "sourcesContent": ["export enum STTErrorCode {\r\n  SPEECH_NOT_SUPPORTED = \"SPEECH_NOT_SUPPORTED\",\r\n  GENERAL_ERROR = \"GENERAL_ERROR\",\r\n  PERMISSION_DENIED = \"PERMISSION_DENIED\",\r\n}\r\n\r\nexport class STTError extends Error {\r\n  code: STTErrorCode;\r\n\r\n  constructor(code: STTErrorCode, message: string) {\r\n    super(message);\r\n    this.code = code;\r\n    this.name = \"STTError\";\r\n  }\r\n}\r\n", "// STT.ts\r\nimport { STTError, STTErrorCode } from \"./STTError\";\r\n\r\n/** Options accepted by `start()` */\r\nexport interface STTStartOptions {\r\n    lang: string;\r\n    continuous: boolean;\r\n    interimResults: boolean;\r\n}\r\n\r\n/** Speech-to-Text wrapper with per-event listener sets */\r\nexport class STT {\r\n    // \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n    //  Internals\r\n    // \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n    private recognition?: SpeechRecognition;\r\n    private recognizing = false;\r\n    private finalTranscript = \"\";\r\n\r\n    // One Set per event \u279C maximum type safety\r\n    private readonly startListeners = new Set<() => void>();\r\n    private readonly endListeners = new Set<() => void>();\r\n    private readonly resultListeners = new Set<(text: string) => void>();\r\n    private readonly partialResultListeners = new Set<(text: string) => void>();\r\n    private readonly errorListeners = new Set<(err: STTError) => void>();\r\n\r\n    // \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n    //  Construction & binding\r\n    // \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n    constructor() {\r\n        if (typeof window === \"undefined\") return;                 // server-side guard\r\n\r\n        const Impl = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n        if (!Impl) return;                                         // feature not available\r\n\r\n        this.recognition = new Impl();\r\n        this.bindEvents();\r\n    }\r\n\r\n    // \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n    //  Public listener helpers\r\n    // \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n    /* ADDERS */\r\n    public onStart(handler: () => void) { this.startListeners.add(handler); }\r\n    public onEnd(handler: () => void) { this.endListeners.add(handler); }\r\n    public onResult(handler: (text: string) => void) { this.resultListeners.add(handler); }\r\n    public onPartialResult(handler: (text: string) => void) { this.partialResultListeners.add(handler); }\r\n    public onError(handler: (error: STTError) => void) { this.errorListeners.add(handler); }\r\n\r\n    /* REMOVERS */\r\n    public offStart(handler: () => void) { this.startListeners.delete(handler); }\r\n    public offEnd(handler: () => void) { this.endListeners.delete(handler); }\r\n    public offResult(handler: (text: string) => void) { this.resultListeners.delete(handler); }\r\n    public offPartialResult(handler: (text: string) => void) { this.partialResultListeners.delete(handler); }\r\n    public offError(handler: (error: STTError) => void) { this.errorListeners.delete(handler); }\r\n\r\n    /** Clear listeners for a specific event or *all* events */\r\n    public removeAllListeners(event?: \"start\" | \"end\" | \"result\" | \"partialResult\" | \"error\"): void {\r\n        switch (event) {\r\n            case \"start\": this.startListeners.clear(); break;\r\n            case \"end\": this.endListeners.clear(); break;\r\n            case \"result\": this.resultListeners.clear(); break;\r\n            case \"partialResult\": this.partialResultListeners.clear(); break;\r\n            case \"error\": this.errorListeners.clear(); break;\r\n            default:               // clear everything\r\n                this.startListeners.clear();\r\n                this.endListeners.clear();\r\n                this.resultListeners.clear();\r\n                this.partialResultListeners.clear();\r\n                this.errorListeners.clear();\r\n        }\r\n    }\r\n\r\n    // \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n    //  SpeechRecognition wiring\r\n    // \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n    private bindEvents(): void {\r\n        const r = this.recognition!;\r\n        /* start / end -------------------------------------------------------- */\r\n        r.onstart = () => { this.recognizing = true; this.emitStart(); };\r\n        r.onend = () => { this.recognizing = false; this.emitEnd(); };\r\n\r\n        /* error -------------------------------------------------------------- */\r\n        r.onerror = (event) => {\r\n            const code = (event.error === \"not-allowed\" || event.error === \"permission-denied\") ? STTErrorCode.PERMISSION_DENIED : STTErrorCode.GENERAL_ERROR;\r\n            this.emitError(new STTError(code, event.error));\r\n        };\r\n\r\n        /* results ------------------------------------------------------------ */\r\n        r.onresult = (event: SpeechRecognitionEvent) => {\r\n            let interim = \"\";\r\n\r\n            for (let i = event.resultIndex; i < event.results.length; i++) {\r\n                const transcript = event.results[i][0].transcript;\r\n                if (event.results[i].isFinal) {\r\n                    this.finalTranscript += transcript;\r\n                    this.emitResult(this.finalTranscript.trim());\r\n                } else {\r\n                    interim += transcript;\r\n                }\r\n            }\r\n\r\n            if (interim) {\r\n                this.emitPartialResult(interim.trim());\r\n            }\r\n        };\r\n    }\r\n\r\n    // \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n    //  Emit helpers (private)\r\n    // \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n    private emitStart() { this.startListeners.forEach(fn => fn()); }\r\n    private emitEnd() { this.endListeners.forEach(fn => fn()); }\r\n    private emitResult(text: string) { this.resultListeners.forEach(fn => fn(text)); }\r\n    private emitPartialResult(text: string) { this.partialResultListeners.forEach(fn => fn(text)); }\r\n    private emitError(err: STTError) { this.errorListeners.forEach(fn => fn(err)); }\r\n\r\n    // \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n    //  Public API\r\n    // \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\r\n    /** Begin recognition (prompts for mic permission if needed) */\r\n    public async start(options: Partial<STTStartOptions> = {}): Promise<void> {\r\n        if (!this.recognition) {\r\n            throw new STTError(\r\n                STTErrorCode.SPEECH_NOT_SUPPORTED,\r\n                \"Speech recognition is not supported in this browser.\"\r\n            );\r\n        }\r\n\r\n        // optional permission pre-check\r\n        if (navigator.permissions) {\r\n            const status = await navigator.permissions.query({ name: \"microphone\" as PermissionName });\r\n            if (status.state === \"denied\") {\r\n                throw new STTError(STTErrorCode.PERMISSION_DENIED, \"Microphone permission was denied.\");\r\n            }\r\n        }\r\n\r\n        const { lang = \"en-US\", continuous = true, interimResults = true } = options;\r\n\r\n        this.recognition.lang = lang;\r\n        this.recognition.continuous = continuous;\r\n        this.recognition.interimResults = interimResults;\r\n        this.finalTranscript = \"\";\r\n\r\n        try {\r\n            this.recognition.start();\r\n        } catch (err) {\r\n            const error = err instanceof STTError ? err : new STTError(STTErrorCode.GENERAL_ERROR, (err as Error).message);\r\n            this.emitError(error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    /** Gracefully stop after the current utterance */\r\n    public stop(): void { this.recognition?.stop(); }\r\n\r\n    /** Immediately abort recognition */\r\n    public abort(): void { this.recognition?.abort(); }\r\n\r\n    /** `true` while SpeechRecognition is active */\r\n    public isRecognizing(): boolean { return this.recognizing; }\r\n\r\n    /** Stop recognition and detach all listeners */\r\n    public dispose(): void {\r\n        this.stop();\r\n        this.removeAllListeners();\r\n        this.recognition = undefined;\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": ["STTErrorCode"]
}
