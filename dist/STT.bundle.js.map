{
  "version": 3,
  "sources": ["../src/STTError.ts", "../src/STT.ts"],
  "sourcesContent": ["export enum STTErrorCode {\r\n  SPEECH_NOT_SUPPORTED = \"SPEECH_NOT_SUPPORTED\",\r\n  GENERAL_ERROR = \"GENERAL_ERROR\"\r\n}\r\n\r\nexport class STTError extends Error {\r\n  code: STTErrorCode;\r\n\r\n  constructor(code: STTErrorCode, message: string) {\r\n    super(message);\r\n    this.code = code;\r\n    this.name = 'SpeechError';\r\n  }\r\n}\r\n", "import { STTError, STTErrorCode } from \"./STTError\";\r\n\r\nexport interface STTStartOptions {\r\n    lang: string;\r\n    continuous: boolean;\r\n    interimResults: boolean;\r\n}\r\n\r\nexport class STT {\r\n    private recognition: SpeechRecognition | undefined = undefined;\r\n    private recognizing = false;\r\n    private finalTranscript = '';\r\n\r\n    public onStart?: () => void;\r\n    public onEnd?: () => void;\r\n    public onResult?: (finalTranscript: string) => void;\r\n    public onPartialResult?: (interimTranscript: string) => void;\r\n    public onError?: (error: string) => void;\r\n\r\n    constructor() {\r\n        if (typeof window === 'undefined') {\r\n            return;\r\n        }\r\n        const Impl = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n        if (!Impl) {\r\n            return;\r\n        }\r\n\r\n        this.recognition = new Impl();\r\n        if (!this.recognition) {\r\n            return;\r\n        }\r\n\r\n        this.bindEvents();\r\n    }\r\n\r\n    private bindEvents() {\r\n        if (!this.recognition) {\r\n            return;\r\n        }\r\n        this.recognition.onstart = () => {\r\n            this.recognizing = true;\r\n            this.onStart?.();\r\n        };\r\n\r\n        this.recognition.onend = () => {\r\n            this.recognizing = false;\r\n            this.onEnd?.();\r\n        };\r\n\r\n        this.recognition.onerror = (event) => {\r\n            this.onError?.(event.error);\r\n        };\r\n\r\n        this.recognition.onresult = (event) => {\r\n            let interim = '';\r\n            for (let i = event.resultIndex; i < event.results.length; i++) {\r\n                const transcript = event.results[i][0].transcript;\r\n                if (event.results[i].isFinal) {\r\n                    this.finalTranscript += transcript;\r\n                    this.onResult?.(this.finalTranscript.trim());\r\n                } else {\r\n                    interim += transcript;\r\n                }\r\n            }\r\n\r\n            if (interim && this.onPartialResult) {\r\n                this.onPartialResult(interim.trim());\r\n            }\r\n        };\r\n    }\r\n\r\n    start(options: STTStartOptions) {\r\n        if (!this.recognition) {\r\n            throw new STTError(STTErrorCode.SPEECH_NOT_SUPPORTED, 'Speech recognition not supported');\r\n        }\r\n        this.recognition.lang = options.lang;\r\n        this.recognition.continuous = options.continuous;\r\n        this.recognition.interimResults = options.interimResults;\r\n        this.finalTranscript = '';\r\n        this.recognition?.start();\r\n    }\r\n\r\n    stop() {\r\n        this.recognition?.stop();\r\n    }\r\n\r\n    abort() {\r\n        this.recognition?.abort();\r\n    }\r\n\r\n    isRecognizing() {\r\n        return this.recognizing;\r\n    }\r\n\r\n    dispose() {\r\n        if (!this.recognition) {\r\n            return;\r\n        }\r\n    }\r\n\r\n}\r\n"],
  "mappings": ";AAKO,IAAM,WAAN,cAAuB,MAAM;AAAA,EAGlC,YAAY,MAAoB,SAAiB;AAC/C,UAAM,OAAO;AACb,SAAK,OAAO;AACZ,SAAK,OAAO;AAAA,EACd;AACF;;;ACLO,IAAM,MAAN,MAAU;AAAA,EAWb,cAAc;AAVd,SAAQ,cAA6C;AACrD,SAAQ,cAAc;AACtB,SAAQ,kBAAkB;AAStB,QAAI,OAAO,WAAW,aAAa;AAC/B;AAAA,IACJ;AACA,UAAM,OAAO,OAAO,qBAAqB,OAAO;AAChD,QAAI,CAAC,MAAM;AACP;AAAA,IACJ;AAEA,SAAK,cAAc,IAAI,KAAK;AAC5B,QAAI,CAAC,KAAK,aAAa;AACnB;AAAA,IACJ;AAEA,SAAK,WAAW;AAAA,EACpB;AAAA,EAEQ,aAAa;AACjB,QAAI,CAAC,KAAK,aAAa;AACnB;AAAA,IACJ;AACA,SAAK,YAAY,UAAU,MAAM;AAxCzC;AAyCY,WAAK,cAAc;AACnB,iBAAK,YAAL;AAAA,IACJ;AAEA,SAAK,YAAY,QAAQ,MAAM;AA7CvC;AA8CY,WAAK,cAAc;AACnB,iBAAK,UAAL;AAAA,IACJ;AAEA,SAAK,YAAY,UAAU,CAAC,UAAU;AAlD9C;AAmDY,iBAAK,YAAL,8BAAe,MAAM;AAAA,IACzB;AAEA,SAAK,YAAY,WAAW,CAAC,UAAU;AAtD/C;AAuDY,UAAI,UAAU;AACd,eAAS,IAAI,MAAM,aAAa,IAAI,MAAM,QAAQ,QAAQ,KAAK;AAC3D,cAAM,aAAa,MAAM,QAAQ,CAAC,EAAE,CAAC,EAAE;AACvC,YAAI,MAAM,QAAQ,CAAC,EAAE,SAAS;AAC1B,eAAK,mBAAmB;AACxB,qBAAK,aAAL,8BAAgB,KAAK,gBAAgB,KAAK;AAAA,QAC9C,OAAO;AACH,qBAAW;AAAA,QACf;AAAA,MACJ;AAEA,UAAI,WAAW,KAAK,iBAAiB;AACjC,aAAK,gBAAgB,QAAQ,KAAK,CAAC;AAAA,MACvC;AAAA,IACJ;AAAA,EACJ;AAAA,EAEA,MAAM,SAA0B;AAxEpC;AAyEQ,QAAI,CAAC,KAAK,aAAa;AACnB,YAAM,IAAI,4DAA4C,kCAAkC;AAAA,IAC5F;AACA,SAAK,YAAY,OAAO,QAAQ;AAChC,SAAK,YAAY,aAAa,QAAQ;AACtC,SAAK,YAAY,iBAAiB,QAAQ;AAC1C,SAAK,kBAAkB;AACvB,eAAK,gBAAL,mBAAkB;AAAA,EACtB;AAAA,EAEA,OAAO;AAnFX;AAoFQ,eAAK,gBAAL,mBAAkB;AAAA,EACtB;AAAA,EAEA,QAAQ;AAvFZ;AAwFQ,eAAK,gBAAL,mBAAkB;AAAA,EACtB;AAAA,EAEA,gBAAgB;AACZ,WAAO,KAAK;AAAA,EAChB;AAAA,EAEA,UAAU;AACN,QAAI,CAAC,KAAK,aAAa;AACnB;AAAA,IACJ;AAAA,EACJ;AAEJ;",
  "names": []
}
