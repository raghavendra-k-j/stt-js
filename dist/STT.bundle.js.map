{
  "version": 3,
  "sources": ["../src/STTError.ts", "../src/STT.ts"],
  "sourcesContent": ["export enum STTErrorCode {\r\n  SPEECH_NOT_SUPPORTED = \"SPEECH_NOT_SUPPORTED\",\r\n  GENERAL_ERROR = \"GENERAL_ERROR\",\r\n  PERMISSION_DENIED = \"PERMISSION_DENIED\",\r\n}\r\n\r\nexport class STTError extends Error {\r\n  code: STTErrorCode;\r\n\r\n  constructor(code: STTErrorCode, message: string) {\r\n    super(message);\r\n    this.code = code;\r\n    this.name = \"STTError\";\r\n  }\r\n}\r\n", "import { STTError, STTErrorCode } from \"./STTError\";\r\n\r\nexport interface STTStartOptions {\r\n    lang: string;\r\n    continuous: boolean;\r\n    interimResults: boolean;\r\n}\r\n\r\nexport type STTEvent = \"start\" | \"end\" | \"result\" | \"partialResult\" | \"error\";\r\nexport type STTEventHandler = (data?: any) => void;\r\n\r\nexport class STT {\r\n    private recognition?: SpeechRecognition;\r\n    private recognizing = false;\r\n    private finalTranscript = \"\";\r\n    private listeners: Map<STTEvent, Set<STTEventHandler>> = new Map();\r\n\r\n    constructor() {\r\n        if (typeof window === \"undefined\") return;\r\n\r\n        const Impl = window.SpeechRecognition || window.webkitSpeechRecognition;\r\n        if (!Impl) return;\r\n\r\n        this.recognition = new Impl();\r\n        this.bindEvents();\r\n    }\r\n\r\n    public addListener(event: STTEvent, handler: STTEventHandler): void {\r\n        if (!this.listeners.has(event)) {\r\n            this.listeners.set(event, new Set());\r\n        }\r\n        this.listeners.get(event)?.add(handler);\r\n    }\r\n\r\n    public removeListener(event: STTEvent, handler: STTEventHandler): void {\r\n        this.listeners.get(event)?.delete(handler);\r\n    }\r\n\r\n    public removeAllListeners(event?: STTEvent): void {\r\n        if (event) {\r\n            this.listeners.delete(event);\r\n        } else {\r\n            this.listeners.clear();\r\n        }\r\n    }\r\n\r\n    private emit(event: STTEvent, data?: any): void {\r\n        this.listeners.get(event)?.forEach((handler) => handler(data));\r\n    }\r\n\r\n    private bindEvents(): void {\r\n        if (!this.recognition) return;\r\n\r\n        this.recognition.onstart = () => {\r\n            this.recognizing = true;\r\n            this.emit(\"start\");\r\n        };\r\n\r\n        this.recognition.onend = () => {\r\n            this.recognizing = false;\r\n            this.emit(\"end\");\r\n        };\r\n\r\n        this.recognition.onerror = (event) => {\r\n            const code =\r\n                event.error === \"not-allowed\" || event.error === \"permission-denied\"\r\n                    ? STTErrorCode.PERMISSION_DENIED\r\n                    : STTErrorCode.GENERAL_ERROR;\r\n\r\n            this.emit(\"error\", new STTError(code, event.error));\r\n        };\r\n\r\n        this.recognition.onresult = (event: SpeechRecognitionEvent) => {\r\n            let interim = \"\";\r\n\r\n            for (let i = event.resultIndex; i < event.results.length; i++) {\r\n                const transcript = event.results[i][0].transcript;\r\n                if (event.results[i].isFinal) {\r\n                    this.finalTranscript += transcript;\r\n                    this.emit(\"result\", this.finalTranscript.trim());\r\n                } else {\r\n                    interim += transcript;\r\n                }\r\n            }\r\n\r\n            if (interim) {\r\n                this.emit(\"partialResult\", interim.trim());\r\n            }\r\n        };\r\n    }\r\n\r\n\r\n    public async start(options: Partial<STTStartOptions> = {}): Promise<void> {\r\n        if (!this.recognition) {\r\n            throw new STTError(\r\n                STTErrorCode.SPEECH_NOT_SUPPORTED,\r\n                \"Speech recognition is not supported in this browser.\"\r\n            );\r\n        }\r\n\r\n        try {\r\n            if (navigator.permissions) {\r\n                const status = await navigator.permissions.query({\r\n                    name: \"microphone\" as PermissionName,\r\n                });\r\n                if (status.state === \"denied\") {\r\n                    throw new STTError(\r\n                        STTErrorCode.PERMISSION_DENIED,\r\n                        \"Microphone permission was denied.\"\r\n                    );\r\n                }\r\n            }\r\n\r\n            const {\r\n                lang = \"en-US\",\r\n                continuous = true,\r\n                interimResults = true,\r\n            } = options;\r\n\r\n            this.recognition.lang = lang;\r\n            this.recognition.continuous = continuous;\r\n            this.recognition.interimResults = interimResults;\r\n            this.finalTranscript = \"\";\r\n\r\n            this.recognition.start();\r\n        } catch (err) {\r\n            const error =\r\n                err instanceof STTError\r\n                    ? err\r\n                    : new STTError(STTErrorCode.GENERAL_ERROR, (err as Error).message);\r\n\r\n            this.emit(\"error\", error);\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    public stop(): void {\r\n        this.recognition?.stop();\r\n    }\r\n\r\n    public abort(): void {\r\n        this.recognition?.abort();\r\n    }\r\n\r\n    public isRecognizing(): boolean {\r\n        return this.recognizing;\r\n    }\r\n\r\n    public dispose(): void {\r\n        this.stop();\r\n        this.removeAllListeners();\r\n        this.recognition = undefined;\r\n    }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
